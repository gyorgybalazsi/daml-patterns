-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


{-# LANGUAGE PartialTypeSignatures #-}


module LockingBySafekeeping where

import CoinIssuance
import Utilities
import DA.Time
import Daml.Script

data LockResult = LockResult {
  coinCid : ContractId Coin;
  lockCid : ContractId LockedCoinV2
}

template LockedCoinV2
  with
    coin: Coin
    maturity: Time
    locker: Party
  where
    signatory locker, coin.owner

    controller locker can
      UnlockV2
        : ContractId Coin
        with coinCid : ContractId Coin
        do   
          inputCoin <- fetch coinCid
          assert (inputCoin.owner == locker)
          tpCid <- exercise coinCid Transfer with newOwner = coin.owner
          exercise tpCid AcceptTransfer

    controller coin.owner can
      ClawbackV2
        : ContractId Coin
        with coinCid : ContractId Coin
        do   
          currTime <- getTime
          assert (currTime >= maturity)
          inputCoin <- fetch coinCid
          assert (inputCoin == coin with owner=locker)
          tpCid <- exercise coinCid Transfer with newOwner = coin.owner
          exercise tpCid AcceptTransfer

template LockRequest
  with
    locker: Party
    maturity: Time
    coin: Coin
  where
    signatory locker

    controller coin.owner can
      Accept : LockResult
        with coinCid : ContractId Coin
        do   
          inputCoin <- fetch coinCid
          assert (inputCoin == coin)
          tpCid <- exercise coinCid Transfer with newOwner = locker
          coinCid <- exercise tpCid AcceptTransfer
          lockCid <- create LockedCoinV2 with locker; maturity; coin
          return LockResult {coinCid; lockCid}


locking : Script (ContractId Coin)  -- test
locking = do

    [issuer, owner, newOwner, locker] <- makePartiesFrom ["Bank", "Me", "You", "Custodian Bank"]

    now <- getTime

   --when coin is created, owner = locker. it is unlocked
    coinId <- createCoin issuer owner 100.0

    Some coin <- queryContractId issuer coinId
    lockRequestCid <- locker `submit` do
      createCmd LockRequest with locker; maturity= (addRelTime now (days 2)); coin
    lockResult <- owner `submit` do exerciseCmd lockRequestCid Accept with coinCid = coinId

    --since it is locked and maturity time hasn't elapsed yet, owner cannot clawback
    owner `submitMustFail` do exerciseCmd lockResult.lockCid ClawbackV2 with coinCid = lockResult.coinCid

    --only after unlock, owner can access the coin
    unlockedCoin <- locker `submit` exerciseCmd lockResult.lockCid UnlockV2 with coinCid = lockResult.coinCid
    propId <- owner `submit` exerciseCmd unlockedCoin Transfer with newOwner
    newOwner `submit` exerciseCmd propId AcceptTransfer
