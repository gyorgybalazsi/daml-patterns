module IAM where
import Daml.Script
import Utilities 

--  OPERATOR ROLE CONTRACT

template OperatorRoleContract 
    with 
        operator : Party 
    where 
        signatory operator 
        controller operator can 
            nonconsuming OperatorRoleContract_MakeVendorRoleContractOffer : ContractId VendorRoleContractOffer 
                with 
                    vendor : Party 
                do 
                    create VendorRoleContractOffer with .. 
            nonconsuming OperatorRoleContract_MakeHospitalRoleContractOffer : ContractId HospitalRoleContractOffer 
                with 
                    hospital : Party 
                do 
                    create HospitalRoleContractOffer with .. 


-- VENDOR ROLE CONTRACT

template VendorRoleContractOffer -- We can do the other way round by VendorRoleContractRequest
    with 
        operator : Party 
        vendor : Party 
    where 
        signatory operator 
        controller vendor can 
            VendorRoleContractOffer_Accept : ContractId VendorRoleContract 
                do 
                    create VendorRoleContract with ..

template VendorRoleContract 
    with 
        operator : Party 
        vendor : Party 
    where 
        signatory operator, vendor -- Operator cannot act as vendor and authorize employee 
        key vendor : Party
        maintainer key : Party
        controller vendor can 
            VendorRoleContract_AuthorizeFinanceEmployee : ContractId VendorFinanceEmployeeAthorization 
                with 
                    employee : Party -- Vendor can authorize herself as an employee
                do  
                    create VendorFinanceEmployeeAthorization with .. 

-- HOSPITAL ROLE CONTRACT

template HospitalRoleContractOffer 
    with 
        operator : Party 
        hospital : Party 
    where 
        signatory operator 
        controller hospital can 
            HospitalRoleContractOffer_Accept : ContractId HospitalRoleContract 
                do 
                    create HospitalRoleContract  with ..


template HospitalRoleContract 
    with 
        operator : Party 
        hospital : Party 
    where 
        signatory operator, hospital  -- Operator cannot act as hospital and authorize employee
        controller hospital can 
            nonconsuming HospitalRoleContract_AuthorizeEmployee : ContractId HospitalFinanceEmployeeAthorization 
                with 
                    employee : Party -- Hospital can authorize herself as an employee
                do 
                    create HospitalFinanceEmployeeAthorization with ..

-- EMPLOYEE AUTHORIZATION

template VendorFinanceEmployeeAthorization
    with 
        vendor : Party
        employee : Party 
    where 
        signatory vendor
        controller employee can 
            nonconsuming VendorEmployeeAthorization_MakeVendorProposal : ContractId VendorProposal 
                with 
                    hospital : Party -- Hospital employees must be able to read as hospital (specified in the JWT token)
                    vendorProposalId : Text
                do 
                    lookupByKey @VendorHospitalLink (vendor, hospital) -- Vendor and hospital must be linked, VendorEmployee must read as Vendor
                    create VendorProposal with ..

template HospitalFinanceEmployeeAthorization
    with 
        hospital : Party
        employee : Party 
    where 
        signatory hospital  
        controller employee can 
            nonconsuming HospitalEmployeeAthorization_AcceptVendorProposal : ContractId VendorContract 
                with 
                    proposalCid : ContractId VendorProposal 
                do 
                    exercise proposalCid VendorProposal_Accept 

-- PROPOSE / ACCEPT

template VendorProposal 
    with 
        hospital : Party 
        vendor : Party 
        vendorProposalId : Text
    where 
        signatory vendor 
        observer hospital 
        key (vendor, vendorProposalId) : (Party, Text)
        maintainer key._1
        controller hospital can 
            VendorProposal_Accept : ContractId VendorContract 
                do 
                    create VendorContract with ..
    
template VendorContract 
    with
        hospital : Party
        vendor : Party 
    where
        signatory vendor, hospital 

-- VENDOR HOSPITAL LINKS 

template VendorHospitalLinkProposal -- We need to use propose / accept pattern in order to hide vendor proposels from operator
    with 
        operator : Party 
        vendor : Party 
        hospital : Party 
    where 
        signatory operator 
        controller vendor can 
            VendorHospitalLinkProposal_Accept : ContractId VendorHospitalLink 
                do 
                    create VendorHospitalLink with ..


template VendorHospitalLink 
    with 
        operator : Party
        vendor : Party 
        hospital : Party 
    where
        signatory vendor 
        observer hospital
        key (vendor, hospital) : (Party, Party)
        maintainer key._1
        controller operator can 
            VendorHospitalLink_Archive : ()
                do 
                    archive self


test : Script ()
test = do 
    [operator, vendor, vendorFinanceEmployee, hospital, hospitalFinanceEmployee] <- makePartiesFrom ["Operator", "Vendor", "VendorFinanceEmployee", "Hospital", "HospitalFinanceEmployee"]

    -- CREATE OPERATOR ROLE CONTRACT
    
    operatorRoleContract <- submit operator $ createCmd OperatorRoleContract with .. 

    -- CREATE VENDOR ROLE CONTRACT

    vendorRoleContractOffer <- submit operator $ exerciseCmd operatorRoleContract OperatorRoleContract_MakeVendorRoleContractOffer 
        with ..
    
    vendorRoleContract <- submit vendor $ exerciseCmd vendorRoleContractOffer VendorRoleContractOffer_Accept 

    -- CREATE HOSPITAL ROLE CONTRACT 

    hospitalRoleContractOffer <- submit operator $ exerciseCmd operatorRoleContract OperatorRoleContract_MakeHospitalRoleContractOffer with ..

    hospitalRoleContract <- submit hospital $ exerciseCmd hospitalRoleContractOffer HospitalRoleContractOffer_Accept

    -- EMPLOYEE AUTHORIZATION
    
    vendorFinanceEmployeeAuthorization <- submit vendor $ exerciseCmd vendorRoleContract VendorRoleContract_AuthorizeFinanceEmployee
        with employee = vendorFinanceEmployee 
    
    hospitalEmployeeAuthorization <- submit hospital $ exerciseCmd hospitalRoleContract HospitalRoleContract_AuthorizeEmployee 
        with employee = hospitalFinanceEmployee 

    -- LINK VENDOR AND HOSPITAL

    vendorHospitalLinkProposal <- submit operator $createCmd VendorHospitalLinkProposal with ..

    submit vendor $ exerciseCmd vendorHospitalLinkProposal VendorHospitalLinkProposal_Accept

    -- PROPOSE / ACCEPT

    -- Vendor employee must read as Vendor

    let vendorProposalId = "Vendor-proposal-id-abc123"

    vendorProposal <- submitMulti [vendorFinanceEmployee] [vendor] $ exerciseCmd vendorFinanceEmployeeAuthorization VendorEmployeeAthorization_MakeVendorProposal with .. 

    -- Hospital employee must read as hospital
    vendorContract <- submitMulti [hospitalFinanceEmployee] [hospital] $ exerciseCmd hospitalEmployeeAuthorization HospitalEmployeeAthorization_AcceptVendorProposal
        with proposalCid = vendorProposal
    
    pure ()
    